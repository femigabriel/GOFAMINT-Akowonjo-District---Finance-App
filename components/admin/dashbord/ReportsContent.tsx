// components/admin/ReportsContent.tsx
"use client";

import { Card, Table, Button, Tag, Space, DatePicker, Select, Statistic, Row, Col, message } from "antd";
import { DollarSign, Download, Filter, TrendingUp, TrendingDown, Eye } from "lucide-react";
import { useState } from "react";

const { RangePicker } = DatePicker;
const { Option } = Select;

interface Report {
  key: string;
  title: string;
  type: 'offering' | 'tithe' | 'donation' | 'expense';
  period: string;
  amount: number;
  status: 'completed' | 'pending' | 'failed';
  generatedBy: string;
  date: string;
}

export default function ReportsContent() {
  const [dateRange, setDateRange] = useState<any>(null);

  const reportsData: Report[] = [
    {
      key: '1',
      title: 'January 2024 Offering',
      type: 'offering',
      period: 'Jan 1 - Jan 31, 2024',
      amount: 450000,
      status: 'completed',
      generatedBy: 'John Ade',
      date: '2024-02-01'
    },
    {
      key: '2',
      title: 'Q4 2023 Tithe Report',
      type: 'tithe',
      period: 'Oct 1 - Dec 31, 2023',
      amount: 890000,
      status: 'completed',
      generatedBy: 'Sarah Musa',
      date: '2024-01-05'
    },
    {
      key: '3',
      title: 'Building Fund Donations',
      type: 'donation',
      period: 'Jan 1 - Jan 31, 2024',
      amount: 250000,
      status: 'completed',
      generatedBy: 'David Okafor',
      date: '2024-02-01'
    },
    {
      key: '4',
      title: 'February 2024 Expense',
      type: 'expense',
      period: 'Feb 1 - Feb 29, 2024',
      amount: 150000,
      status: 'pending',
      generatedBy: 'Grace Bello',
      date: '2024-02-15'
    }
  ];

  const summaryData = [
    {
      title: 'Total Income',
      value: 1590000,
      change: 12.5,
      isPositive: true,
      color: '#10b981'
    },
    {
      title: 'Total Expenses',
      value: 450000,
      change: -8.2,
      isPositive: false,
      color: '#ef4444'
    },
    {
      title: 'Net Balance',
      value: 1140000,
      change: 15.3,
      isPositive: true,
      color: '#3b82f6'
    },
    {
      title: 'Pending Transactions',
      value: 150000,
      change: 5.7,
      isPositive: true,
      color: '#f59e0b'
    }
  ];

  const getTypeColor = (type: string) => {
    const colors = {
      offering: 'blue',
      tithe: 'green',
      donation: 'purple',
      expense: 'red'
    };
    return colors[type as keyof typeof colors] || 'default';
  };

  const getStatusColor = (status: string) => {
    const colors = {
      completed: 'green',
      pending: 'orange',
      failed: 'red'
    };
    return colors[status as keyof typeof colors] || 'default';
  };

  const columns = [
    {
      title: 'Report Title',
      dataIndex: 'title',
      key: 'title',
      render: (text: string, record: Report) => (
        <div>
          <div className="font-medium">{text}</div>
          <div className="text-xs text-gray-500">{record.period}</div>
        </div>
      ),
    },
    {
      title: 'Type',
      dataIndex: 'type',
      key: 'type',
      render: (type: string) => (
        <Tag color={getTypeColor(type)}>
          {type.toUpperCase()}
        </Tag>
      ),
    },
    {
      title: 'Amount',
      dataIndex: 'amount',
      key: 'amount',
      render: (amount: number) => (
        <div className="font-semibold">
          ₦{amount.toLocaleString()}
        </div>
      ),
    },
    {
      title: 'Status',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => (
        <Tag color={getStatusColor(status)}>
          {status.toUpperCase()}
        </Tag>
      ),
    },
    {
      title: 'Generated By',
      dataIndex: 'generatedBy',
      key: 'generatedBy',
    },
    {
      title: 'Date',
      dataIndex: 'date',
      key: 'date',
      render: (date: string) => new Date(date).toLocaleDateString(),
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (_: any, record: Report) => (
        <Space size="small">
          <Button 
            icon={<Eye size={14} />} 
            size="small"
            onClick={() => handleView(record)}
          >
            View
          </Button>
          <Button 
            icon={<Download size={14} />} 
            size="small"
            type="primary"
            onClick={() => handleDownload(record)}
          >
            Download
          </Button>
        </Space>
      ),
    },
  ];

  const handleGenerateReport = () => {
    message.info('Generate report feature coming soon');
  };

  const handleView = (report: Report) => {
    message.info(`Viewing ${report.title}`);
  };

  const handleDownload = (report: Report) => {
    message.success(`Downloading ${report.title}`);
  };

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">
            Finance Reports
          </h1>
          <p className="text-gray-600">
            Financial overview and report management
          </p>
        </div>
        <Button 
          type="primary" 
          icon={<Download size={16} />}
          onClick={handleGenerateReport}
        >
          Generate Report
        </Button>
      </div>

      {/* Financial Summary */}
      <Row gutter={[24, 24]} className="mb-6">
        {summaryData.map((stat, index) => (
          <Col xs={24} sm={12} lg={6} key={index}>
            <Card className="border-0 shadow-lg bg-white">
              <Statistic
                title={stat.title}
                value={stat.value}
                precision={0}
                valueStyle={{ 
                  color: stat.color,
                  fontSize: '24px',
                  fontWeight: 'bold'
                }}
                prefix="₦"
                suffix={
                  <Tag color={stat.isPositive ? 'green' : 'red'} className="ml-2">
                    {stat.isPositive ? <TrendingUp size={12} /> : <TrendingDown size={12} />}
                    {stat.change}%
                  </Tag>
                }
              />
            </Card>
          </Col>
        ))}
      </Row>

      {/* Filters */}
      <Card className="border-0 shadow-lg bg-white mb-6">
        <div className="flex items-center gap-4">
          <div className="flex items-center">
            <Filter size={16} className="mr-2 text-gray-500" />
            <span className="font-medium">Filters:</span>
          </div>
          <RangePicker 
            onChange={setDateRange}
            style={{ width: 250 }}
          />
          <Select placeholder="Report Type" style={{ width: 150 }} allowClear>
            <Option value="offering">Offering</Option>
            <Option value="tithe">Tithe</Option>
            <Option value="donation">Donation</Option>
            <Option value="expense">Expense</Option>
          </Select>
          <Select placeholder="Status" style={{ width: 120 }} allowClear>
            <Option value="completed">Completed</Option>
            <Option value="pending">Pending</Option>
            <Option value="failed">Failed</Option>
          </Select>
        </div>
      </Card>

      {/* Reports Table */}
      <Card 
        title={
          <div className="flex items-center">
            <DollarSign size={20} className="mr-2" />
            <span className="text-lg font-semibold">Financial Reports</span>
          </div>
        }
        className="border-0 shadow-lg bg-white"
      >
        <Table 
          columns={columns} 
          dataSource={reportsData}
          pagination={{ 
            pageSize: 10,
            showSizeChanger: true,
            showTotal: (total, range) => 
              `${range[0]}-${range[1]} of ${total} reports`
          }}
        />
      </Card>
    </div>
  );
}